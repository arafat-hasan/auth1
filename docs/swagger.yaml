basePath: /api/v1
definitions:
  api.ErrorResponse:
    description: Error response
    properties:
      error:
        example: validation_error
        type: string
      message:
        example: Invalid input data
        type: string
      success:
        example: false
        type: boolean
    type: object
  api.LoginRequest:
    description: User login request
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  api.LogoutRequest:
    description: Logout request
    properties:
      refresh_token:
        example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  api.PublicKeyResponse:
    description: JWT public key response
    properties:
      key_type:
        example: RSA
        type: string
      public_key:
        example: |-
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEF...
        type: string
    type: object
  api.RefreshTokenRequest:
    description: Refresh access token request
    properties:
      refresh_token:
        example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  api.RequestOTPRequest:
    description: Request OTP for login or signup
    properties:
      email:
        example: user@example.com
        type: string
      purpose:
        enum:
        - login
        - signup
        example: login
        type: string
    required:
    - email
    - purpose
    type: object
  api.SignupRequest:
    description: User signup request
    properties:
      email:
        example: user@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password123
        type: string
      phone:
        example: "+1234567890"
        type: string
    required:
    - email
    - name
    type: object
  api.SuccessResponse:
    description: Generic success response
    properties:
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  api.TokenResponse:
    description: JWT token response
    properties:
      access_token:
        example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 900
        type: integer
      refresh_token:
        example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
  api.TwoFactorChallengeResponse:
    description: 2FA challenge response
    properties:
      message:
        example: 2FA verification required
        type: string
      requires_two_factor:
        example: true
        type: boolean
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  api.TwoFactorSetupResponse:
    description: 2FA setup response with secret and QR code
    properties:
      qr_code_url:
        example: otpauth://totp/auth1:user@example.com?secret=JBSWY3DPEHPK3PXP&issuer=auth1
        type: string
      secret:
        example: JBSWY3DPEHPK3PXP
        type: string
    type: object
  api.TwoFactorVerifyRequest:
    description: Verify 2FA code request
    properties:
      2fa_code:
        example: "123456"
        type: string
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - 2fa_code
    - user_id
    type: object
  api.UserResponse:
    description: User information response
    properties:
      email:
        example: user@example.com
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      is_2fa_enabled:
        example: false
        type: boolean
      is_verified:
        example: true
        type: boolean
      name:
        example: John Doe
        type: string
    type: object
  api.VerifyLoginRequest:
    description: Verify login OTP request
    properties:
      email:
        example: user@example.com
        type: string
      otp:
        example: "123456"
        type: string
    required:
    - email
    - otp
    type: object
  api.VerifySignupRequest:
    description: Verify signup OTP request
    properties:
      email:
        example: user@example.com
        type: string
      otp:
        example: "123456"
        type: string
    required:
    - email
    - otp
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A secure authentication microservice with JWT, OTP, and 2FA support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: auth1 API
  version: "1.0"
paths:
  /auth/2fa/disable:
    post:
      description: Disable two-factor authentication for user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Disable 2FA
      tags:
      - auth
  /auth/2fa/setup:
    post:
      description: Setup two-factor authentication for user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TwoFactorSetupResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Setup 2FA
      tags:
      - auth
  /auth/2fa/verify:
    post:
      consumes:
      - application/json
      description: Verify two-factor authentication code
      parameters:
      - description: 2FA verify request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.TwoFactorVerifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Verify 2FA
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TwoFactorChallengeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate refresh token
      parameters:
      - description: Logout request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: User logout
      tags:
      - auth
  /auth/me:
    get:
      description: Get current user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
  /auth/public-key:
    get:
      description: Get JWT public key for token verification
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.PublicKeyResponse'
      summary: Get public key
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Refresh token
      tags:
      - auth
  /auth/request-otp:
    post:
      consumes:
      - application/json
      description: Request OTP for login or signup verification
      parameters:
      - description: Request OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.RequestOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "429":
          description: Too Many Requests
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Request OTP
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Signup request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.SignupRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/api.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: User signup
      tags:
      - auth
  /auth/verify-login:
    post:
      consumes:
      - application/json
      description: Verify login with OTP
      parameters:
      - description: Verify login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.VerifyLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Verify login OTP
      tags:
      - auth
  /auth/verify-signup:
    post:
      consumes:
      - application/json
      description: Verify signup with OTP and complete user registration
      parameters:
      - description: Verify signup request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.VerifySignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Verify signup
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
